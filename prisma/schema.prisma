generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  file_id     String
  url         String
  userId      String? @unique @db.ObjectId 
  shopId      String? @unique @db.ObjectId
  productId   String? @db.ObjectId
  users       users? @relation(fields: [userId], references: [id])
  shops       shops? @relation(fields: [shopId], references: [id])
  products    products? @relation(fields: [productId], references: [id])
}

model users {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String @unique
  password    String? 
  following   String[]
  avatar      images?
  reviews     shopReview[] 
  analytics   userAnalytics?
  addresses   userAddresses[]
  orders      orders[]
  notificationsCreated notifications[] @relation("NotificationCreator")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model shopReview {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  user         users @relation(fields: [userId], references: [id])
  rating       Float
  reviews      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shopsId       String? @db.ObjectId
  shops        shops? @relation(fields: [shopsId], references: [id])
}
model shops {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  bio             String?
  category    String
  avatar      images?
  coverBanner String?
  address     String
  opening_hours String?
  website       String?
  social_links  Json[]
  ratings Float @default(0)
  reviews shopReview[]
  sellerId  String @unique @db.ObjectId
  sellers     sellers @relation(fields: [sellerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products products[]
  productAnalytics productAnalytics[]
  orders orders[]
}

model sellers {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String @unique
  phone_number String
  country     String
  password    String?
  stripeId    String?
  shop        shops?
  shopId      String? @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model site_config {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  categories String[]
  subCategories Json
}

model discount_codes {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  public_name String
  discountType String
  discountValue Float
  discountCode String @unique
  sellerId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

enum ProductStatus {
  ACTIVE
  PENDING
  DRAFT
}

model products {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug String @unique
  category String
  subCategory String
  short_description String
  detailed_description String
  images images[]
  video_url String?
  tags String[]
  brand String?
  colors String[]
  sizes String[]
  starting_date DateTime?
  ending_date DateTime?
  stock Int
  sale_price Float
  regular_price Float
  rating Float @default(0)
  warranty String?
  custom_specifications Json?
  custom_properties Json?
  isDeleted Boolean? @default(false)
  cashOnDelivery String?
  discount_codes String[] @db.ObjectId
  status ProductStatus @default(ACTIVE)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId String @db.ObjectId
  shop shops @relation(fields: [shopId], references: [id])
  totalSales Int @default(0)
  analytics productAnalytics?
  orderItems orderItems[]
}

model userAnalytics {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  userId      String @unique @db.ObjectId
  actions     Json[] // Array of user actions with productId, shopId, action, timestamp
  country     String?
  city        String?
  device      String?
  lastVisited DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        users @relation(fields: [userId], references: [id])
}

model userAddresses {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  userId    String @db.ObjectId
  user      users @relation(fields: [userId], references: [id])
  label     String // e.g., "Home", "Work", "Office"
  name      String // Full name for delivery
  street    String
  city      String
  zip       String
  country   String
  isDefault Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  orders    orders[]
}

model productAnalytics {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  productId     String @unique @db.ObjectId
  shopId        String @db.ObjectId
  views         Int @default(0)
  cartAdds      Int @default(0)
  cartRemoves   Int @default(0)
  wishlistAdds  Int @default(0)
  wishlistRemoves Int @default(0)
  purchases     Int @default(0)
  lastViewedAt  DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       products @relation(fields: [productId], references: [id])
  shop          shops @relation(fields: [shopId], references: [id])
}

// Order related models
enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

model orders {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  userId            String @db.ObjectId
  shopId            String @db.ObjectId
  total             Float
  status            OrderStatus @default(PENDING)
  shippingAddressId String? @db.ObjectId
  couponCode        String?
  discountAmount    Float @default(0)
  trackingNumber    String?
  estimatedDelivery DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  
  // Relations
  user              users @relation(fields: [userId], references: [id])
  shop              shops @relation(fields: [shopId], references: [id])
  shippingAddress   userAddresses? @relation(fields: [shippingAddressId], references: [id])
  items             orderItems[]
}

model orderItems {
  id               String @id @default(auto()) @map("_id") @db.ObjectId
  orderId          String @db.ObjectId
  productId        String @db.ObjectId
  quantity         Int
  price            Float
  selectedOptions  Json? // Store selected colors, sizes, etc.
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  // Relations
  order            orders @relation(fields: [orderId], references: [id])
  product          products @relation(fields: [productId], references: [id])
}

model notifications {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  message      String
  creatorId    String @db.ObjectId
  receiverId   String // Can be userId, sellerId, or "admin"
  redirect_link String?
  isRead       Boolean @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // Relations
  creator      users @relation("NotificationCreator", fields: [creatorId], references: [id])
}


model conversationGroup {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  isGroup Boolean @default(false)
  name String?
  creatorId String @db.ObjectId
  participantIds String[] @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

}

model participant {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String @db.ObjectId
  userId String? @db.ObjectId
  sellerId String? @db.ObjectId
  lastSeenAt DateTime?
  isOnline Boolean @default(false)
  unreadCount Int @default(0)
  muted Boolean @default(false)
  joinedAt DateTime @default(now())
}

model message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String @db.ObjectId
  senderId String @db.ObjectId
  senderType String
  content String?
  attachments String[]
  status String @default("sent")
  createdAt DateTime @default(now())
  

  @@unique([conversationId, senderId, createdAt, content])
}