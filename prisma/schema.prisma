generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model images {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  file_id     String
  url         String
  userId      String? @unique @db.ObjectId 
  shopId      String? @unique @db.ObjectId
  productId   String? @db.ObjectId
  users       users? @relation(fields: [userId], references: [id])
  shops       shops? @relation(fields: [shopId], references: [id])
  products    products? @relation(fields: [productId], references: [id])
}

model users {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String @unique
  password    String? 
  following   String[]
  avatar      images?
  reviews     shopReview[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model shopReview {
  id           String @id @default(auto()) @map("_id") @db.ObjectId
  userId       String @db.ObjectId
  user         users @relation(fields: [userId], references: [id])
  rating       Float
  reviews      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  shopsId       String? @db.ObjectId
  shops        shops? @relation(fields: [shopsId], references: [id])
}
model shops {
  id              String @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  bio             String?
  category    String
  avatar      images?
  coverBanner String?
  address     String
  opening_hours String?
  website       String?
  social_links  Json[]
  ratings Float @default(0)
  reviews shopReview[]
  sellerId  String @unique @db.ObjectId
  sellers     sellers @relation(fields: [sellerId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products products[]
}

model sellers {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String @unique
  phone_number String
  country     String
  password    String?
  stripeId    String?
  shop        shops?
  shopId      String? @unique @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model site_config {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  categories String[]
  subCategories Json
}

model discount_codes {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  public_name String
  discountType String
  discountValue Float
  discountCode String @unique
  sellerId String @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
}

enum ProductStatus {
  ACTIVE
  PENDING
  DRAFT
}

model products {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String
  slug String @unique
  category String
  subCategory String
  short_description String
  detailed_description String
  images images[]
  video_url String?
  tags String[]
  brand String?
  colors String[]
  sizes String[]
  starting_date DateTime?
  ending_date DateTime?
  stock Int
  sale_price Float
  regular_price Float
  rating Float @default(0)
  warranty String?
  custom_specifications Json?
  custom_properties Json?
  isDeleted Boolean? @default(false)
  cashOnDelivery String?
  discount_codes String[] @db.ObjectId
  status ProductStatus @default(ACTIVE)
  deletedAt DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  shopId String @db.ObjectId
  shop shops @relation(fields: [shopId], references: [id])
}